{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://localhost:8080/api/cvs';\nvar headers_object = new HttpHeaders({\n  'Content-Type': 'application/json'\n});\nexport class CvService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAll() {\n    return this.http.get(baseUrl);\n  }\n  get(id) {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n  create(data) {\n    return this.http.post(baseUrl, data);\n  }\n  update(data) {\n    const httpOptions = {\n      headers: new Htt()\n    };\n    return this.http.put(`${baseUrl}/${data.id}`, data);\n  }\n  // ,httpOptions\n  delete(id) {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n  getCvById(id) {\n    return this.http.get(`${baseUrl}?id=${id}`);\n  }\n}\n_class = CvService;\n_class.ɵfac = function CvService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","baseUrl","headers_object","CvService","constructor","http","getAll","get","id","create","data","post","update","httpOptions","headers","Htt","put","delete","getCvById","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\nourijam\\Desktop\\cv-angular-nodejs-postgresql\\src\\app\\service\\cv.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Cv } from '../models/cv.model';\nconst baseUrl = 'http://localhost:8080/api/cvs';\nvar headers_object = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CvService {\n\n  constructor(private http: HttpClient) { }\n  getAll(): Observable<Cv[]> {\n    return this.http.get<Cv[]>(baseUrl);\n  }\n  get(id: any): Observable<Cv> {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n\n  create(data: any): Observable<any> {\n    return this.http.post(baseUrl, data);\n  }\n\n  update( data: Cv): Observable<Cv> {\n    const httpOptions = {\n      headers: new Htt\n    };\n    \n    return this.http.put(`${baseUrl}/${data.id}`,data);\n  }\n// ,httpOptions\n\n  delete(id: any): Observable<any> {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n  \n  getCvById(id: any): Observable<Cv|undefined> {\n    return this.http.get<Cv>(`${baseUrl}?id=${id}`);\n  }\n\n\n  \n\n}\n"],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAG9D,MAAMC,OAAO,GAAG,+BAA+B;AAC/C,IAAIC,cAAc,GAAG,IAAIF,WAAW,CAAC;EACnC,cAAc,EAAE;CACjB,CAAC;AAMF,OAAM,MAAOG,SAAS;EAEpBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EACxCC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAON,OAAO,CAAC;EACrC;EACAM,GAAGA,CAACC,EAAO;IACT,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAAC,GAAGN,OAAO,IAAIO,EAAE,EAAE,CAAC;EAC1C;EAEAC,MAAMA,CAACC,IAAS;IACd,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAACV,OAAO,EAAES,IAAI,CAAC;EACtC;EAEAE,MAAMA,CAAEF,IAAQ;IACd,MAAMG,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIC,GAAG,CAAH;KACd;IAED,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAC,GAAGf,OAAO,IAAIS,IAAI,CAACF,EAAE,EAAE,EAACE,IAAI,CAAC;EACpD;EACF;EAEEO,MAAMA,CAACT,EAAO;IACZ,OAAO,IAAI,CAACH,IAAI,CAACY,MAAM,CAAC,GAAGhB,OAAO,IAAIO,EAAE,EAAE,CAAC;EAC7C;EAEAU,SAASA,CAACV,EAAO;IACf,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAAK,GAAGN,OAAO,OAAOO,EAAE,EAAE,CAAC;EACjD;;SA7BWL,SAAS;;mBAATA,MAAS,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAATnB,MAAS;EAAAoB,OAAA,EAATpB,MAAS,CAAAqB,IAAA;EAAAC,UAAA,EAHR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}