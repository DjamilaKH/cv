{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://localhost:8080/api/cvs';\nexport class CvService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAll() {\n    return this.http.get(baseUrl).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, undefined)));\n  }\n  getCVbiId(id) {\n    return this.http.get(`${baseUrl}/${id}`).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, undefined)));\n    ;\n  }\n  create(data) {\n    return this.http.post(baseUrl, data).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, undefined)));\n  }\n  update(data) {\n    const httpOptios = {\n      headers: new HttpHeaders({\n        'Content-type': 'application/json'\n      })\n    };\n    return this.http.put(`${baseUrl}`, data, httpOptios).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, undefined)));\n  }\n  delete(id) {\n    return this.http.delete(`${baseUrl}/${id}`).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, undefined)));\n  }\n  log(response) {\n    console.table(response);\n  }\n  handleError(error, errorValue) {\n    console.error(error);\n    return of(errorValue);\n  }\n}\n_class = CvService;\n_class.ɵfac = function CvService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","catchError","of","tap","baseUrl","CvService","constructor","http","getAll","get","pipe","response","log","error","handleError","undefined","getCVbiId","id","create","data","post","update","httpOptios","headers","put","delete","console","table","errorValue","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\nourijam\\Desktop\\cv-angular-nodejs-postgresql\\src\\app\\service\\cv.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders,HttpEvent,HttpResponse  } from '@angular/common/http';\nimport { Observable, catchError, of, tap } from 'rxjs';\nimport { Cv } from '../models/cv.model';\nconst baseUrl = 'http://localhost:8080/api/cvs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CvService {\n\n  constructor(private http: HttpClient) { }\n  getAll(): Observable<Cv[]> {\n    return this.http.get<Cv[]>(baseUrl).pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.handleError(error, undefined))\n    );\n  }\n  getCVbiId(id: number): Observable<Cv|undefined> {\n    return this.http.get<Cv>(`${baseUrl}/${id}`).pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.handleError(error, undefined))\n    );;\n  }\n\n  create(data: any): Observable<any> {\n    return this.http.post(baseUrl, data).pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.handleError(error, undefined))\n    );\n  }\n\n  update( data: any): Observable<Cv|null> {\n      const httpOptios={\n        headers: new HttpHeaders({'Content-type': 'application/json'})\n      }\n    return this.http.put(`${baseUrl}`,data,httpOptios).pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.handleError(error, undefined))\n    );\n  }\n  delete(id: any): Observable<any> {\n    return this.http.delete(`${baseUrl}/${id}`).pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.handleError(error, undefined))\n    );\n  }\n\n  private log(response: any) {\n    console.table(response);\n  }\n\n  private handleError(error: Error, errorValue: any) {\n    console.error(error);\n    return of(errorValue);\n  }\n  \n\n}\n"],"mappings":";AACA,SAAqBA,WAAW,QAAgC,sBAAsB;AACtF,SAAqBC,UAAU,EAAEC,EAAE,EAAEC,GAAG,QAAQ,MAAM;;;AAEtD,MAAMC,OAAO,GAAG,+BAA+B;AAO/C,OAAM,MAAOC,SAAS;EAEpBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EACxCC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAOL,OAAO,CAAC,CAACM,IAAI,CACtCP,GAAG,CAAEQ,QAAQ,IAAK,IAAI,CAACC,GAAG,CAACD,QAAQ,CAAC,CAAC,EACrCV,UAAU,CAAEY,KAAK,IAAK,IAAI,CAACC,WAAW,CAACD,KAAK,EAAEE,SAAS,CAAC,CAAC,CAC1D;EACH;EACAC,SAASA,CAACC,EAAU;IAClB,OAAO,IAAI,CAACV,IAAI,CAACE,GAAG,CAAK,GAAGL,OAAO,IAAIa,EAAE,EAAE,CAAC,CAACP,IAAI,CAC/CP,GAAG,CAAEQ,QAAQ,IAAK,IAAI,CAACC,GAAG,CAACD,QAAQ,CAAC,CAAC,EACrCV,UAAU,CAAEY,KAAK,IAAK,IAAI,CAACC,WAAW,CAACD,KAAK,EAAEE,SAAS,CAAC,CAAC,CAC1D;IAAC;EACJ;EAEAG,MAAMA,CAACC,IAAS;IACd,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAChB,OAAO,EAAEe,IAAI,CAAC,CAACT,IAAI,CACvCP,GAAG,CAAEQ,QAAQ,IAAK,IAAI,CAACC,GAAG,CAACD,QAAQ,CAAC,CAAC,EACrCV,UAAU,CAAEY,KAAK,IAAK,IAAI,CAACC,WAAW,CAACD,KAAK,EAAEE,SAAS,CAAC,CAAC,CAC1D;EACH;EAEAM,MAAMA,CAAEF,IAAS;IACb,MAAMG,UAAU,GAAC;MACfC,OAAO,EAAE,IAAIvB,WAAW,CAAC;QAAC,cAAc,EAAE;MAAkB,CAAC;KAC9D;IACH,OAAO,IAAI,CAACO,IAAI,CAACiB,GAAG,CAAC,GAAGpB,OAAO,EAAE,EAACe,IAAI,EAACG,UAAU,CAAC,CAACZ,IAAI,CACrDP,GAAG,CAAEQ,QAAQ,IAAK,IAAI,CAACC,GAAG,CAACD,QAAQ,CAAC,CAAC,EACrCV,UAAU,CAAEY,KAAK,IAAK,IAAI,CAACC,WAAW,CAACD,KAAK,EAAEE,SAAS,CAAC,CAAC,CAC1D;EACH;EACAU,MAAMA,CAACR,EAAO;IACZ,OAAO,IAAI,CAACV,IAAI,CAACkB,MAAM,CAAC,GAAGrB,OAAO,IAAIa,EAAE,EAAE,CAAC,CAACP,IAAI,CAC9CP,GAAG,CAAEQ,QAAQ,IAAK,IAAI,CAACC,GAAG,CAACD,QAAQ,CAAC,CAAC,EACrCV,UAAU,CAAEY,KAAK,IAAK,IAAI,CAACC,WAAW,CAACD,KAAK,EAAEE,SAAS,CAAC,CAAC,CAC1D;EACH;EAEQH,GAAGA,CAACD,QAAa;IACvBe,OAAO,CAACC,KAAK,CAAChB,QAAQ,CAAC;EACzB;EAEQG,WAAWA,CAACD,KAAY,EAAEe,UAAe;IAC/CF,OAAO,CAACb,KAAK,CAACA,KAAK,CAAC;IACpB,OAAOX,EAAE,CAAC0B,UAAU,CAAC;EACvB;;SA9CWvB,SAAS;;mBAATA,MAAS,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAT3B,MAAS;EAAA4B,OAAA,EAAT5B,MAAS,CAAA6B,IAAA;EAAAC,UAAA,EAHR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}