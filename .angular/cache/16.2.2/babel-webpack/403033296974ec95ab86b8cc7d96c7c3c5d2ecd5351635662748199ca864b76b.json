{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/service/cv.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../formmcv/formmcv.component\";\nfunction EditcvComponent_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.cv.titCV);\n  }\n}\nfunction EditcvComponent_app_formmcv_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-formmcv\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"cv\", ctx_r1.cv);\n  }\n}\nexport class EditcvComponent {\n  //  cvForm!: FormGroup;\n  constructor(router, route, cvService) {\n    this.router = router;\n    this.route = route;\n    this.cvService = cvService;\n    this.iseditCv = this.router.url.includes('edit');\n    // this.cvForm = this.formBuilder.group({\n    //   // photoCv: [''],\n    //   nom: new FormControl((['', Validators.required]))  ,\n    //   prenom: new FormControl((['', Validators.required])),\n    //   email:  (['', [Validators.required, Validators.email]]),\n    //   telephone:(['', [Validators.required, this.validateTelephoneFormat]]),\n    //   titCV: (['', Validators.required]),\n    //   profilCv: (['', Validators.required]),\n    //   objecCarri: (['', [Validators.required]]),\n    // });\n  }\n  // validateTelephoneFormat(control: AbstractControl): { [key: string]: boolean } | null {\n  //   const phoneNumberPattern = /^\\d{2}-\\d{3}-\\d{3}$/;\n  //   if (control.value && !phoneNumberPattern.test(control.value)) {\n  //     return { 'telephoneFormat': true };\n  //   }\n  //   return null;\n  // }  \n  ngOnInit() {\n    const cvId = this.route.snapshot.paramMap.get('id');\n    if (this.iseditCv) {\n      if (cvId) {\n        this.cvService.get(+cvId).subscribe(data => {\n          this.cv = data;\n          console.log(\"le cv à modifier est \", this.cv);\n        });\n      }\n    }\n  }\n}\n_class = EditcvComponent;\n_class.ɵfac = function EditcvComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.CvService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-editcv\"]],\n  decls: 4,\n  vars: 3,\n  consts: [[1, \"center\"], [\"class\", \"cen\", 4, \"ngIf\"], [3, \"cv\", 4, \"ngIf\"], [1, \"cen\"], [3, \"cv\"]],\n  template: function EditcvComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, EditcvComponent_p_2_Template, 2, 1, \"p\", 1);\n      i0.ɵɵtemplate(3, EditcvComponent_app_formmcv_3_Template, 1, 1, \"app-formmcv\", 2);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"Modifier CV \", ctx.cv == null ? null : ctx.cv.nom, \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.cv);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.cv);\n    }\n  },\n  dependencies: [i3.NgIf, i4.FormmcvComponent],\n  encapsulation: 2\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","cv","titCV","ɵɵelement","ɵɵproperty","ctx_r1","EditcvComponent","constructor","router","route","cvService","iseditCv","url","includes","ngOnInit","cvId","snapshot","paramMap","get","subscribe","data","console","log","ɵɵdirectiveInject","i1","Router","ActivatedRoute","i2","CvService","selectors","decls","vars","consts","template","EditcvComponent_Template","rf","ctx","ɵɵtemplate","EditcvComponent_p_2_Template","EditcvComponent_app_formmcv_3_Template","ɵɵtextInterpolate1","nom"],"sources":["C:\\Users\\nourijam\\Desktop\\cv-angular-nodejs-postgresql\\src\\app\\components\\editcv\\editcv.component.ts"],"sourcesContent":["import { Component, HostListener, Input, OnInit} from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router} from '@angular/router';\nimport { Cv } from 'src/app/models/cv.model';\nimport { CvService } from 'src/app/service/cv.service';\n\n@Component({\n  selector: 'app-editcv',\n  template: `\n  <h1 class=\"center\">Modifier CV {{cv?.nom}}</h1>\n  <p *ngIf=\"cv\" class=\"cen\">{{cv.titCV}}</p>\n  <app-formmcv *ngIf=\"cv\" [cv]=\"cv\"></app-formmcv>\n`,\n})\nexport class EditcvComponent implements OnInit {\n  iseditCv!: boolean;\n   cv!: Cv|undefined ;\n  //  cvForm!: FormGroup;\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private cvService: CvService,\n    // private formBuilder: FormBuilder,\n  )\n  {\n    this.iseditCv=this.router.url.includes('edit')\n    // this.cvForm = this.formBuilder.group({\n    //   // photoCv: [''],\n    //   nom: new FormControl((['', Validators.required]))  ,\n    //   prenom: new FormControl((['', Validators.required])),\n    //   email:  (['', [Validators.required, Validators.email]]),\n    //   telephone:(['', [Validators.required, this.validateTelephoneFormat]]),\n    //   titCV: (['', Validators.required]),\n    //   profilCv: (['', Validators.required]),\n    //   objecCarri: (['', [Validators.required]]),\n    // });\n  }\n  // validateTelephoneFormat(control: AbstractControl): { [key: string]: boolean } | null {\n  //   const phoneNumberPattern = /^\\d{2}-\\d{3}-\\d{3}$/;\n  //   if (control.value && !phoneNumberPattern.test(control.value)) {\n  //     return { 'telephoneFormat': true };\n  //   }\n  //   return null;\n  // }  \n\n  ngOnInit() {\n    const cvId: string|null = this.route.snapshot.paramMap.get('id');\n    if (this.iseditCv) {\n    if (cvId) {\n      this.cvService.get(+cvId).subscribe((data) => { this.cv = data\n        console.log(\"le cv à modifier est \", this.cv)\n      });\n    }}}}"],"mappings":";;;;;;;;IAUEA,EAAA,CAAAC,cAAA,WAA0B;IAAAD,EAAA,CAAAE,MAAA,GAAY;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;IAAhBH,EAAA,CAAAI,SAAA,GAAY;IAAZJ,EAAA,CAAAK,iBAAA,CAAAC,MAAA,CAAAC,EAAA,CAAAC,KAAA,CAAY;;;;;IACtCR,EAAA,CAAAS,SAAA,qBAAgD;;;;IAAxBT,EAAA,CAAAU,UAAA,OAAAC,MAAA,CAAAJ,EAAA,CAAS;;;AAGnC,OAAM,MAAOK,eAAe;EAG1B;EACAC,YACUC,MAAc,EACdC,KAAqB,EACrBC,SAAoB;IAFpB,KAAAF,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,SAAS,GAATA,SAAS;IAIjB,IAAI,CAACC,QAAQ,GAAC,IAAI,CAACH,MAAM,CAACI,GAAG,CAACC,QAAQ,CAAC,MAAM,CAAC;IAC9C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,QAAQA,CAAA;IACN,MAAMC,IAAI,GAAgB,IAAI,CAACN,KAAK,CAACO,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IAChE,IAAI,IAAI,CAACP,QAAQ,EAAE;MACnB,IAAII,IAAI,EAAE;QACR,IAAI,CAACL,SAAS,CAACQ,GAAG,CAAC,CAACH,IAAI,CAAC,CAACI,SAAS,CAAEC,IAAI,IAAI;UAAG,IAAI,CAACnB,EAAE,GAAGmB,IAAI;UAC5DC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACrB,EAAE,CAAC;QAC/C,CAAC,CAAC;;;EACF;;SAtCOK,eAAe;;mBAAfA,MAAe,EAAAZ,EAAA,CAAA6B,iBAAA,CAAAC,EAAA,CAAAC,MAAA,GAAA/B,EAAA,CAAA6B,iBAAA,CAAAC,EAAA,CAAAE,cAAA,GAAAhC,EAAA,CAAA6B,iBAAA,CAAAI,EAAA,CAAAC,SAAA;AAAA;;QAAftB,MAAe;EAAAuB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MAL1BzC,EAAA,CAAAC,cAAA,YAAmB;MAAAD,EAAA,CAAAE,MAAA,GAAuB;MAAAF,EAAA,CAAAG,YAAA,EAAK;MAC/CH,EAAA,CAAA2C,UAAA,IAAAC,4BAAA,eAA0C;MAC1C5C,EAAA,CAAA2C,UAAA,IAAAE,sCAAA,yBAAgD;;;MAF7B7C,EAAA,CAAAI,SAAA,GAAuB;MAAvBJ,EAAA,CAAA8C,kBAAA,iBAAAJ,GAAA,CAAAnC,EAAA,kBAAAmC,GAAA,CAAAnC,EAAA,CAAAwC,GAAA,KAAuB;MACtC/C,EAAA,CAAAI,SAAA,GAAQ;MAARJ,EAAA,CAAAU,UAAA,SAAAgC,GAAA,CAAAnC,EAAA,CAAQ;MACEP,EAAA,CAAAI,SAAA,GAAQ;MAARJ,EAAA,CAAAU,UAAA,SAAAgC,GAAA,CAAAnC,EAAA,CAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}