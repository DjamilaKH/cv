{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nexport let FormmcvComponent = class FormmcvComponent {\n  constructor(formBuilder, router, cvService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.cvService = cvService;\n    this.loading = false;\n    this.submitted = false;\n    this.cvForm = this.formBuilder.group({\n      nom: '',\n      prenom: '',\n      telephone: '',\n      titCV: '',\n      profilCv: '',\n      objecCarri: ''\n    });\n  }\n  ngOnInit() {\n    this.isAddCv = this.router.url.includes('add');\n  }\n  validateTelephoneFormat(control) {\n    const phoneNumberPattern = /^\\d{2}-\\d{3}-\\d{3}$/;\n    if (control.value && !phoneNumberPattern.test(control.value)) {\n      return {\n        'telephoneFormat': true\n      };\n    }\n    return null;\n  }\n  Submit() {\n    if (this.isAddCv) {\n      this.cvService.create(this.cv).subscribe(cv => this.router.navigate(['/list']));\n    } else {\n      this.cvService.update(this.cv, this.cv.id).subscribe(() => this.router.navigate(['/cv', this.cv.id]));\n    }\n  }\n};\n__decorate([Input()], FormmcvComponent.prototype, \"cv\", void 0);\nFormmcvComponent = __decorate([Component({\n  selector: 'app-formmcv',\n  templateUrl: './formmcv.component.html',\n  styleUrls: ['./formmcv.component.css']\n})], FormmcvComponent);","map":{"version":3,"names":["Component","Input","FormmcvComponent","constructor","formBuilder","router","cvService","loading","submitted","cvForm","group","nom","prenom","telephone","titCV","profilCv","objecCarri","ngOnInit","isAddCv","url","includes","validateTelephoneFormat","control","phoneNumberPattern","value","test","Submit","create","cv","subscribe","navigate","update","id","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\nourijam\\Desktop\\cv-angular-nodejs-postgresql\\src\\app\\components\\formmcv\\formmcv.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Cv } from 'src/app/models/cv.model';\nimport { CvService } from 'src/app/service/cv.service';\n@Component({\n  selector: 'app-formmcv',\n  templateUrl: './formmcv.component.html',\n  styleUrls: ['./formmcv.component.css']\n})\nexport class FormmcvComponent implements OnInit {\n  @Input() cv!:Cv\n  cvForm!: FormGroup;\n  isAddCv!: boolean;\n  loading = false;\n  submitted = false;\n\n  constructor(private formBuilder: FormBuilder,\n    private router: Router,\n    private cvService: CvService){\n      this.cvForm = this.formBuilder.group({\n        nom: ''  ,\n        prenom: '',\n        telephone:'',\n        titCV: '',\n        profilCv: '',\n        objecCarri:'',\n      });\n       } \n  ngOnInit() {\n    this.isAddCv=this.router.url.includes('add')\n  }\n  validateTelephoneFormat(control: AbstractControl): { [key: string]: boolean } | null {\n    const phoneNumberPattern = /^\\d{2}-\\d{3}-\\d{3}$/;\n    if (control.value && !phoneNumberPattern.test(control.value)) {\n      return { 'telephoneFormat': true };\n    }\n    return null;\n  }  \n  Submit() {\n    if (this.isAddCv) {\n      this.cvService.create(this.cv)   \n      .subscribe((cv:Cv)=>this.router.navigate(['/list']))      \n    }\n    else {\n      this.cvService.update(this.cv, this.cv.id).subscribe(()=>this.router.navigate(['/cv',this.cv.id]),\n      ); \n  } \n    }\n\n     // *****edit  ({\n      //   next: (cv) => {\n      //     console.log(cv);\n      //   },\n      //   error: (e) => console.error(e)\n      // })\n      \n    // ****** add {\n      //   next:(res)=>{\n      //     console.log(res);\n\n          \n      //     this.router.navigate(['/']);\n\n      //   },\n      //   error: (e) => console.error(e)\n      // }\n  \n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAgB,eAAe;AAUjD,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAO3BC,YAAoBC,WAAwB,EAClCC,MAAc,EACdC,SAAoB;IAFV,KAAAF,WAAW,GAAXA,WAAW;IACrB,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,SAAS,GAATA,SAAS;IALnB,KAAAC,OAAO,GAAG,KAAK;IACf,KAAAC,SAAS,GAAG,KAAK;IAKb,IAAI,CAACC,MAAM,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACnCC,GAAG,EAAE,EAAE;MACPC,MAAM,EAAE,EAAE;MACVC,SAAS,EAAC,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAC;KACZ,CAAC;EACD;EACLC,QAAQA,CAAA;IACN,IAAI,CAACC,OAAO,GAAC,IAAI,CAACb,MAAM,CAACc,GAAG,CAACC,QAAQ,CAAC,KAAK,CAAC;EAC9C;EACAC,uBAAuBA,CAACC,OAAwB;IAC9C,MAAMC,kBAAkB,GAAG,qBAAqB;IAChD,IAAID,OAAO,CAACE,KAAK,IAAI,CAACD,kBAAkB,CAACE,IAAI,CAACH,OAAO,CAACE,KAAK,CAAC,EAAE;MAC5D,OAAO;QAAE,iBAAiB,EAAE;MAAI,CAAE;;IAEpC,OAAO,IAAI;EACb;EACAE,MAAMA,CAAA;IACJ,IAAI,IAAI,CAACR,OAAO,EAAE;MAChB,IAAI,CAACZ,SAAS,CAACqB,MAAM,CAAC,IAAI,CAACC,EAAE,CAAC,CAC7BC,SAAS,CAAED,EAAK,IAAG,IAAI,CAACvB,MAAM,CAACyB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;KACrD,MACI;MACH,IAAI,CAACxB,SAAS,CAACyB,MAAM,CAAC,IAAI,CAACH,EAAE,EAAE,IAAI,CAACA,EAAE,CAACI,EAAE,CAAC,CAACH,SAAS,CAAC,MAAI,IAAI,CAACxB,MAAM,CAACyB,QAAQ,CAAC,CAAC,KAAK,EAAC,IAAI,CAACF,EAAE,CAACI,EAAE,CAAC,CAAC,CAChG;;EAEH;CAoBH;AAzDUC,UAAA,EAARhC,KAAK,EAAE,C,2CAAO;AADJC,gBAAgB,GAAA+B,UAAA,EAL5BjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWlC,gBAAgB,CA0D5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}