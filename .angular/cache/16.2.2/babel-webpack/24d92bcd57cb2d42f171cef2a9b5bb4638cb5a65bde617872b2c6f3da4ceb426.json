{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://localhost:8080/api/cvs';\nexport class CvService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAll() {\n    return this.http.get(baseUrl);\n  }\n  get(id) {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n  create(data) {\n    return this.http.post(baseUrl, data);\n  }\n  update(id, data) {\n    return this.http.put(`${baseUrl}/${id}`, data);\n  }\n  delete(id) {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n  getCvById(cvIdd) {\n    const url = `${this.baseUrl}/${cvId}`;\n    return this.http.get(url);\n  }\n}\n_class = CvService;\n_class.ɵfac = function CvService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["baseUrl","CvService","constructor","http","getAll","get","id","create","data","post","update","put","delete","getCvById","cvIdd","url","cvId","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\nourijam\\Desktop\\cv-angular-nodejs-postgresql\\src\\app\\service\\cv.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Cv } from '../models/cv.model';\nconst baseUrl = 'http://localhost:8080/api/cvs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CvService {\n\n  constructor(private http: HttpClient) { }\n  getAll(): Observable<Cv[]> {\n    return this.http.get<Cv[]>(baseUrl);\n  }\n  get(id: any): Observable<Cv> {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n\n  create(data: any): Observable<any> {\n    return this.http.post(baseUrl, data);\n  }\n\n  update(id: any, data: any): Observable<any> {\n    return this.http.put(`${baseUrl}/${id}`, data);\n  }\n\n\n  delete(id: any): Observable<any> {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n  getCvById(cvIdd: any): Observable<Cv|undefined> {\n    const url = `${this.baseUrl}/${cvId}`;\n    return this.http.get<Cv>(url);\n  }\n\n\n  \n\n}\n"],"mappings":";;;AAIA,MAAMA,OAAO,GAAG,+BAA+B;AAI/C,OAAM,MAAOC,SAAS;EAEpBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EACxCC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAOL,OAAO,CAAC;EACrC;EACAK,GAAGA,CAACC,EAAO;IACT,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAAC,GAAGL,OAAO,IAAIM,EAAE,EAAE,CAAC;EAC1C;EAEAC,MAAMA,CAACC,IAAS;IACd,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAACT,OAAO,EAAEQ,IAAI,CAAC;EACtC;EAEAE,MAAMA,CAACJ,EAAO,EAAEE,IAAS;IACvB,OAAO,IAAI,CAACL,IAAI,CAACQ,GAAG,CAAC,GAAGX,OAAO,IAAIM,EAAE,EAAE,EAAEE,IAAI,CAAC;EAChD;EAGAI,MAAMA,CAACN,EAAO;IACZ,OAAO,IAAI,CAACH,IAAI,CAACS,MAAM,CAAC,GAAGZ,OAAO,IAAIM,EAAE,EAAE,CAAC;EAC7C;EACAO,SAASA,CAACC,KAAU;IAClB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACf,OAAO,IAAIgB,IAAI,EAAE;IACrC,OAAO,IAAI,CAACb,IAAI,CAACE,GAAG,CAAKU,GAAG,CAAC;EAC/B;;SAzBWd,SAAS;;mBAATA,MAAS,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAATnB,MAAS;EAAAoB,OAAA,EAATpB,MAAS,CAAAqB,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}