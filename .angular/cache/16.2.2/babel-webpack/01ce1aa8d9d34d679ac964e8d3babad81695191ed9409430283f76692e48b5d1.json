{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://localhost:8080/api/cvs';\nvar headers_object = new HttpHeaders({\n  'Content-Type': 'application/json',\n  'Authorization': \"bearer \" + token\n});\nexport class CvService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAll() {\n    return this.http.get(baseUrl);\n  }\n  get(id) {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n  create(data) {\n    return this.http.post(baseUrl, data);\n  }\n  update(id, data) {\n    return this.http.put(`${baseUrl}/${id}`, data);\n  }\n  delete(id) {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n  getCvById(id) {\n    return this.http.get(`${baseUrl}?id=${id}`);\n  }\n}\n_class = CvService;\n_class.ɵfac = function CvService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["baseUrl","headers_object","HttpHeaders","token","CvService","constructor","http","getAll","get","id","create","data","post","update","put","delete","getCvById","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\nourijam\\Desktop\\cv-angular-nodejs-postgresql\\src\\app\\service\\cv.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Cv } from '../models/cv.model';\nconst baseUrl = 'http://localhost:8080/api/cvs';\nvar headers_object = new HttpHeaders({\n  'Content-Type': 'application/json',\n  'Authorization': \"bearer \" + token\n});\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CvService {\n\n  constructor(private http: HttpClient) { }\n  getAll(): Observable<Cv[]> {\n    return this.http.get<Cv[]>(baseUrl);\n  }\n  get(id: any): Observable<Cv> {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n\n  create(data: any): Observable<any> {\n    return this.http.post(baseUrl, data);\n  }\n\n  update(id: any, data: Cv): Observable<Cv> {\n    return this.http.put(`${baseUrl}/${id}`, data);\n  }\n\n\n  delete(id: any): Observable<any> {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n  \n  getCvById(id: any): Observable<Cv|undefined> {\n    return this.http.get<Cv>(`${baseUrl}?id=${id}`);\n  }\n\n\n  \n\n}\n"],"mappings":";;;AAIA,MAAMA,OAAO,GAAG,+BAA+B;AAC/C,IAAIC,cAAc,GAAG,IAAIC,WAAW,CAAC;EACnC,cAAc,EAAE,kBAAkB;EAClC,eAAe,EAAE,SAAS,GAAGC;CAC9B,CAAC;AAMF,OAAM,MAAOC,SAAS;EAEpBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EACxCC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAOR,OAAO,CAAC;EACrC;EACAQ,GAAGA,CAACC,EAAO;IACT,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAAC,GAAGR,OAAO,IAAIS,EAAE,EAAE,CAAC;EAC1C;EAEAC,MAAMA,CAACC,IAAS;IACd,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAACZ,OAAO,EAAEW,IAAI,CAAC;EACtC;EAEAE,MAAMA,CAACJ,EAAO,EAAEE,IAAQ;IACtB,OAAO,IAAI,CAACL,IAAI,CAACQ,GAAG,CAAC,GAAGd,OAAO,IAAIS,EAAE,EAAE,EAAEE,IAAI,CAAC;EAChD;EAGAI,MAAMA,CAACN,EAAO;IACZ,OAAO,IAAI,CAACH,IAAI,CAACS,MAAM,CAAC,GAAGf,OAAO,IAAIS,EAAE,EAAE,CAAC;EAC7C;EAEAO,SAASA,CAACP,EAAO;IACf,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAAK,GAAGR,OAAO,OAAOS,EAAE,EAAE,CAAC;EACjD;;SAzBWL,SAAS;;mBAATA,MAAS,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAThB,MAAS;EAAAiB,OAAA,EAATjB,MAAS,CAAAkB,IAAA;EAAAC,UAAA,EAHR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}