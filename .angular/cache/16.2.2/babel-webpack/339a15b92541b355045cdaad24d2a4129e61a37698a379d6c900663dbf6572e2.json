{"ast":null,"code":"var _class;\nimport { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/service/cv.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nfunction EditformComponent_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 1);\n    i0.ɵɵlistener(\"ngSubmit\", function EditformComponent_form_0_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.Submit());\n    });\n    i0.ɵɵelementStart(1, \"mat-card\")(2, \"mat-form-field\")(3, \"input\", 2, 3);\n    i0.ɵɵlistener(\"ngModelChange\", function EditformComponent_form_0_Template_input_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.cv.prenom = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"mat-form-field\")(6, \"input\", 4, 5);\n    i0.ɵɵlistener(\"ngModelChange\", function EditformComponent_form_0_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.cv.nom = $event);\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(8, \"button\", 6);\n    i0.ɵɵtext(9, \"\\nEnregistrer et Contunier\\n\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.cvForm);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.cv.prenom);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.cv.nom);\n  }\n}\nexport class EditformComponent {\n  constructor(formBuilder, router, cvService, route) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.cvService = cvService;\n    this.route = route;\n    this.cvForm = this.formBuilder.group({\n      nom: new FormControl('', Validators.required),\n      prenom: new FormControl('', Validators.required)\n    });\n  }\n  ngOnInit() {\n    const cvId = this.route.snapshot.paramMap.get('id');\n    if (cvId) {\n      this.cvService.getCVbyId(+cvId).subscribe(cv => this.cv = cv);\n      console.log(this.cv?.prenom);\n    } else {\n      this.cv = undefined;\n    }\n  }\n  Submit() {\n    this.cvService.update(this.cv, this.cv?.id).subscribe(() => this.router.navigate(['/cv', this.cv?.id]));\n    this.router.navigate(['/cv', this.cv?.id]);\n  }\n}\n_class = EditformComponent;\n_class.ɵfac = function EditformComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.CvService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-editform\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[\"name\", \"myForm\", \"class\", \"dimention\", \"style\", \"margin-top: 100px; margin-bottom: 100px\", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [\"name\", \"myForm\", 1, \"dimention\", 2, \"margin-top\", \"100px\", \"margin-bottom\", \"100px\", 3, \"formGroup\", \"ngSubmit\"], [\"matInput\", \"\", \"placeholder\", \"Prenom\", \"required\", \"\", \"name\", \"prenom\", 3, \"ngModel\", \"ngModelChange\"], [\"prenom\", \"ngModel\"], [\"matInput\", \"\", \"placeholder\", \"Nom\", \"required\", \"\", \"name\", \"nom\", 3, \"ngModel\", \"ngModelChange\"], [\"nom\", \"ngModel\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 2, \"background-color\", \"#e6e0ed\", \"color\", \"#020005\"]],\n  template: function EditformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, EditformComponent_form_0_Template, 10, 3, \"form\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.cv);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.NgModel, i1.FormGroupDirective, i5.MatButton, i6.MatCard, i7.MatFormField, i8.MatInput],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","Validators","i0","ɵɵelementStart","ɵɵlistener","EditformComponent_form_0_Template_form_ngSubmit_0_listener","ɵɵrestoreView","_r4","ctx_r3","ɵɵnextContext","ɵɵresetView","Submit","EditformComponent_form_0_Template_input_ngModelChange_3_listener","$event","ctx_r5","cv","prenom","ɵɵelementEnd","EditformComponent_form_0_Template_input_ngModelChange_6_listener","ctx_r6","nom","ɵɵtext","ɵɵproperty","ctx_r0","cvForm","ɵɵadvance","EditformComponent","constructor","formBuilder","router","cvService","route","group","required","ngOnInit","cvId","snapshot","paramMap","get","getCVbyId","subscribe","console","log","undefined","update","id","navigate","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","i3","CvService","ActivatedRoute","selectors","decls","vars","consts","template","EditformComponent_Template","rf","ctx","ɵɵtemplate","EditformComponent_form_0_Template"],"sources":["C:\\Users\\nourijam\\Desktop\\cv-angular-nodejs-postgresql\\src\\app\\components\\editform\\editform.component.ts","C:\\Users\\nourijam\\Desktop\\cv-angular-nodejs-postgresql\\src\\app\\components\\editform\\editform.component.html"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControl, FormControlName, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Cv } from 'src/app/models/cv.model';\nimport { CvService } from 'src/app/service/cv.service';\n\n@Component({\n  selector: 'app-editform',\n  templateUrl: './editform.component.html',\n  styleUrls: ['./editform.component.css']\n})\nexport class EditformComponent {\n\n  cvForm!: FormGroup;\n  cv: Cv|undefined;\n  constructor(private formBuilder: FormBuilder,\n    private router: Router,\n    private cvService: CvService,\n    private route: ActivatedRoute,) { \n      this.cvForm = this.formBuilder.group({\n        nom: new FormControl ('', Validators.required) ,\n        prenom:new FormControl('', Validators.required),\n      });\n       } \n\n\n       ngOnInit() {\n        const cvId: string|null = this.route.snapshot.paramMap.get('id');\n    \n        if (cvId) {\n          this.cvService.getCVbyId(+cvId).subscribe(cv=>  this.cv = cv);\n          console.log(this.cv?.prenom)\n        }\n        else {\n          this.cv = undefined;\n        }}\n      Submit() {\n         this.cvService.update(this.cv, this.cv?.id).subscribe(()=>this.router.navigate(['/cv',this.cv?.id]),\n      ); \n       this.router.navigate(['/cv', this.cv?.id])\n\n      }\n\n\n\n\n}\n","\n<form name=\"myForm\" *ngIf=\"cv\" [formGroup]=\"cvForm\" (ngSubmit)=\"Submit()\" class=\"dimention\" \nstyle=\"margin-top: 100px; margin-bottom: 100px\">\n<mat-card>\n\n<mat-form-field>\n<input matInput placeholder=\"Prenom\" required  [(ngModel)]=\"cv.prenom\" name=\"prenom\"\n                   #prenom=\"ngModel\">\n<!-- <mat-error *ngIf=\"cvForm.get('prenom')?.hasError('required')\">Le prenom est requis</mat-error> -->\n\n</mat-form-field>\n\n<mat-form-field>\n\n<input matInput placeholder=\"Nom\" required  [(ngModel)]=\"cv.nom\" name=\"nom\"\n#nom=\"ngModel\"> \n<!-- <mat-error *ngIf=\"cvForm.get('nom')?.hasError('required')\">Le nom est requis</mat-error> -->\n</mat-form-field>\n\n</mat-card>\n\n<button\nmat-raised-button style=\"background-color: #e6e0ed; color: #020005\" type=\"submit\">\nEnregistrer et Contunier\n</button>\n</form>\n<!-- [disabled]=\"cvForm.invalid\" -->"],"mappings":";AACA,SAAuCA,WAAW,EAA8BC,UAAU,QAAQ,gBAAgB;;;;;;;;;;;;;ICAlHC,EAAA,CAAAC,cAAA,cACgD;IADID,EAAA,CAAAE,UAAA,sBAAAC,2DAAA;MAAAH,EAAA,CAAAI,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAN,EAAA,CAAAO,aAAA;MAAA,OAAYP,EAAA,CAAAQ,WAAA,CAAAF,MAAA,CAAAG,MAAA,EAAQ;IAAA,EAAC;IAEzET,EAAA,CAAAC,cAAA,eAAU;IAGqCD,EAAA,CAAAE,UAAA,2BAAAQ,iEAAAC,MAAA;MAAAX,EAAA,CAAAI,aAAA,CAAAC,GAAA;MAAA,MAAAO,MAAA,GAAAZ,EAAA,CAAAO,aAAA;MAAA,OAAaP,EAAA,CAAAQ,WAAA,CAAAI,MAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,MAAA,CAAiB;IAAA,EAAP;IAAtEX,EAAA,CAAAe,YAAA,EACqC;IAKrCf,EAAA,CAAAC,cAAA,qBAAgB;IAE4BD,EAAA,CAAAE,UAAA,2BAAAc,iEAAAL,MAAA;MAAAX,EAAA,CAAAI,aAAA,CAAAC,GAAA;MAAA,MAAAY,MAAA,GAAAjB,EAAA,CAAAO,aAAA;MAAA,OAAaP,EAAA,CAAAQ,WAAA,CAAAS,MAAA,CAAAJ,EAAA,CAAAK,GAAA,GAAAP,MAAA,CAAc;IAAA,EAAP;IAAhEX,EAAA,CAAAe,YAAA,EACe;IAMff,EAAA,CAAAC,cAAA,gBACkF;IAClFD,EAAA,CAAAmB,MAAA,mCACA;IAAAnB,EAAA,CAAAe,YAAA,EAAS;;;;IAvBsBf,EAAA,CAAAoB,UAAA,cAAAC,MAAA,CAAAC,MAAA,CAAoB;IAKJtB,EAAA,CAAAuB,SAAA,GAAuB;IAAvBvB,EAAA,CAAAoB,UAAA,YAAAC,MAAA,CAAAR,EAAA,CAAAC,MAAA,CAAuB;IAQ1Bd,EAAA,CAAAuB,SAAA,GAAoB;IAApBvB,EAAA,CAAAoB,UAAA,YAAAC,MAAA,CAAAR,EAAA,CAAAK,GAAA,CAAoB;;;ADHhE,OAAM,MAAOM,iBAAiB;EAI5BC,YAAoBC,WAAwB,EAClCC,MAAc,EACdC,SAAoB,EACpBC,KAAqB;IAHX,KAAAH,WAAW,GAAXA,WAAW;IACrB,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,SAAS,GAATA,SAAS;IACT,KAAAC,KAAK,GAALA,KAAK;IACX,IAAI,CAACP,MAAM,GAAG,IAAI,CAACI,WAAW,CAACI,KAAK,CAAC;MACnCZ,GAAG,EAAE,IAAIpB,WAAW,CAAE,EAAE,EAAEC,UAAU,CAACgC,QAAQ,CAAC;MAC9CjB,MAAM,EAAC,IAAIhB,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACgC,QAAQ;KAC/C,CAAC;EACD;EAGAC,QAAQA,CAAA;IACP,MAAMC,IAAI,GAAgB,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IAEhE,IAAIH,IAAI,EAAE;MACR,IAAI,CAACL,SAAS,CAACS,SAAS,CAAC,CAACJ,IAAI,CAAC,CAACK,SAAS,CAACzB,EAAE,IAAI,IAAI,CAACA,EAAE,GAAGA,EAAE,CAAC;MAC7D0B,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3B,EAAE,EAAEC,MAAM,CAAC;KAC7B,MACI;MACH,IAAI,CAACD,EAAE,GAAG4B,SAAS;;EACpB;EACHhC,MAAMA,CAAA;IACH,IAAI,CAACmB,SAAS,CAACc,MAAM,CAAC,IAAI,CAAC7B,EAAE,EAAE,IAAI,CAACA,EAAE,EAAE8B,EAAE,CAAC,CAACL,SAAS,CAAC,MAAI,IAAI,CAACX,MAAM,CAACiB,QAAQ,CAAC,CAAC,KAAK,EAAC,IAAI,CAAC/B,EAAE,EAAE8B,EAAE,CAAC,CAAC,CACrG;IACA,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC/B,EAAE,EAAE8B,EAAE,CAAC,CAAC;EAE3C;;SA9BOnB,iBAAiB;;mBAAjBA,MAAiB,EAAAxB,EAAA,CAAA6C,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAA/C,EAAA,CAAA6C,iBAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAjD,EAAA,CAAA6C,iBAAA,CAAAK,EAAA,CAAAC,SAAA,GAAAnD,EAAA,CAAA6C,iBAAA,CAAAG,EAAA,CAAAI,cAAA;AAAA;;QAAjB5B,MAAiB;EAAA6B,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCV9B3D,EAAA,CAAA6D,UAAA,IAAAC,iCAAA,mBAwBO;;;MAxBc9D,EAAA,CAAAoB,UAAA,SAAAwC,GAAA,CAAA/C,EAAA,CAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}